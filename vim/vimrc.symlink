if !1 | finish | endif

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'pangloss/vim-javascript'
Plug 'nanotech/jellybeans.vim'
Plug '29decibel/codeschool-vim-theme'
Plug 'noah/vim256-color'
Plug 'osyo-manga/vim-over'
Plug 'tpope/vim-fugitive'
Plug 'bronson/vim-trailing-whitespace'
Plug 'rstacruz/sparkup'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'elixir-lang/vim-elixir'
Plug 'Valloric/YouCompleteMe'
Plug 'kshenoy/vim-signature'
Plug 'trevordmiller/nova-vim'
Plug 'morhetz/gruvbox'
Plug 'christoomey/vim-tmux-navigator'
Plug 'mileszs/ack.vim'
Plug 'w0rp/ale'
call plug#end()

let mapleader = ","

set nocompatible                " choose no compatibility with legacy vi
syntax enable
set encoding=utf-8
set showcmd                     " display incomplete commands
set clipboard=unnamed
set notimeout
set timeoutlen=1000
set ttimeoutlen=0

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital let
set laststatus=2

colorscheme gruvbox
set background=dark
set relativenumber
set number
:set colorcolumn=100
:set smartindent
:set expandtab

set guioptions=
set guifont=SourceCodeProForPowerline-Medium:h16


let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
 
:inoremap jj <Esc>
nnoremap <C-n> :bn<cr>
nnoremap <C-N> :bp<cr>
map <Leader>w :w<cr>
map <Leader>d :bd<cr>
nnoremap <Leader>q :tabclose<CR>
nnoremap <Leader>fw :FixWhitespace<CR>
nnoremap <Leader>cc :cclose<CR>
nnoremap <Leader>co :copen<CR>
nnoremap <Leader>gw :Gwrite<CR>

set backupdir=~/.vim/_backup//
set directory=~/.vim/_temp//

" allow undo history to persist after closing buffer
if has('persistent_undo')
  set undodir=~/.vim/_undo
  set undofile
end
:
" Highlight line when in insert mode
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme='luna'
let g:airline#extensions#tabline#enabled = 1

" NERDTree
let g:NERDTreeWinPos = "right"
map <Leader>n :NERDTreeToggle<CR>

if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
  let g:ackprg='ag --vimgrep'

  " Use ag in CtrlP for listing files. Fast and respects .gitignore
  let g:ctrlp_user_comment = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind \ to grep shortcut
  command -nargs=+ -complete=file -bar Ag silent! <args>|cwindow|redraw!
  nnoremap \ :Ag<SPACE>
endif

" CrtlP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|tmp\|bower_components\|deps\|_build\|docs\|.*\.meta'

"" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_auto_loc_list = 2
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_ruby_checkers = ['mri', 'rubocop']
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_elixir_checkers = ['elixir']
" let g:syntastic_enable_elixir_checker = 1

" Over.VIM

function! VisualFindAndReplace()
  :OverCommandLine %s/
  :w
endfunction

function! VisualFindAndReplaceWithSelection() range
  :'<,'>OverCommandLine s/
  :w
endfunction

nnoremap <Leader>fr :call VisualFindAndReplace()<CR>
xnoremap <Leader>fr :call VisualFindAndReplaceWithSelection()<CR>

let NERDTreeIgnore = ['\.meta$']

" let g:mix_format_on_save = 1
" let g:mix_format_silent_errors = 1

let g:ale_fixers = {}
let g:ale_javascript_prettier_options = '--no-semi'
let g:ale_fixers['javascript'] = ['prettier', 'eslint']
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_fixers['elixir'] = ['mix_format']

let g:ale_fix_on_save = 1
